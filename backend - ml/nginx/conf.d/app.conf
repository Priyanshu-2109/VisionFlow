# nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    
    # Root directory for the React app
    root /usr/share/nginx/html;
    
    # Main location block for the React frontend
    location / {
        # Try to serve the requested URI, then fall back to index.html for SPA routing
        try_files $uri $uri/ /index.html;
    }
    
    # API requests - proxy to the Flask backend
    location /api/ {
        proxy_pass http://web:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # Static files from Flask
    location /static/ {
        alias /usr/share/nginx/html/static/;
        expires 30d;
    }
    
    # Enable gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        application/javascript
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        text/css
        text/javascript
        text/plain
        text/xml;
}
2. Simplified Docker Compose for Local Testing
Create a new Docker Compose file for local development:

Copy# docker-compose.local.yml
version: '3'

services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - SECRET_KEY=dev-secret-key
      - JWT_SECRET_KEY=dev-jwt-secret-key
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:darshit89@db:5432/business_intelligence
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: always
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 app.main:app

  db:
    image: postgres:13
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=business_intelligence
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

  nginx:
    image: nginx:1.21
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./static:/usr/share/nginx/html/static
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - web
    restart: always

volumes:
  postgres_data:
  redis_data: